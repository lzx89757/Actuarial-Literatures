vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma_u = (sigma2_u)^0.5;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = exp(Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i] - mu1[i]))^2/(2*sigma1^2)
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]);
}
}
model{
target += normal_lpdf(alpha|0, 100);
target += normal_lpdf(beta|0, 100);
//target += cauchy_lpdf(sigma1|0, 2.5);
//target += cauchy_lpdf(nu2|0, 2.5);
target += normal_lpdf(u|0, sigma_u);
target += cauchy_lpdf(sigma2_u|0, 2.5);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(-0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - 0.5*((log(y1[i] - mu1[i]))/sigma1)^2
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
#chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
mydat
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma2_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma_u = (sigma2_u)^0.5;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = exp(Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i] - mu1[i]))^2/(2*sigma1^2)
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]);
}
}
model{
target += normal_lpdf(alpha|0, 100);
target += normal_lpdf(beta|0, 100);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
target += normal_lpdf(u|0, sigma_u);
target += cauchy_lpdf(sigma2_u|0, 2.5);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(-0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - 0.5*((log(y1[i] - mu1[i]))/sigma1)^2
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
#chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
mydat$y1
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma2_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma_u = (sigma2_u)^0.5;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = exp(Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]);
}
}
model{
target += normal_lpdf(alpha|0, 100);
target += normal_lpdf(beta|0, 100);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
target += normal_lpdf(u|0, sigma_u);
target += cauchy_lpdf(sigma2_u|0, 2.5);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(-0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - 0.5*((log(y1[i]) - mu1[i])/sigma1)^2
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
#chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u', 'sigma2_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma2_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma_u = (sigma2_u)^0.5;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = exp(Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]);
}
}
model{
target += normal_lpdf(alpha|0, 100);
target += normal_lpdf(beta|0, 100);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
// target += normal_lpdf(u|0, sigma_u);
target += cauchy_lpdf(sigma2_u|0, 2.5);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(-0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - 0.5*((log(y1[i]) - mu1[i])/sigma1)^2
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
#chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u', 'sigma2_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma2_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma_u = (sigma2_u)^0.5;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = (Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]);
}
}
model{
target += normal_lpdf(alpha|0, 10);
target += normal_lpdf(beta|0, 10);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
// target += normal_lpdf(u|0, sigma_u);
target += cauchy_lpdf(sigma2_u|0, 2.5);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(-0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - 0.5*((log(y1[i]) - mu1[i])/sigma1)^2
+ nu2*log(y2[i]/mu2[i]) - log(y2[i]) - lgamma(nu2) - (y2[i]/mu2[i]));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
stan_trace(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'))
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma_u;
sigma2_u = (sigma_u)^2;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = (Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
- nu2*log((1/nu2)*mu2[i]) + (nu2 - 1)*log(y2[i]) - (y2[i]*nu2)/mu2[i] - lgamma(nu2);
}
}
model{
target += normal_lpdf(alpha|0, 10);
target += normal_lpdf(beta|0, 10);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
target += gamma_lpdf(sigma_u|2, 10);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(- 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
- nu2*log((1/nu2)*mu2[i]) + (nu2 - 1)*log(y2[i]) - (y2[i]*nu2)/mu2[i] - lgamma(nu2));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
model.m2 <- "
data{
int<lower = 0> N;
int<lower = 0> k;
real y1[N];
real y2[N];
matrix[N, k] X;
int<lower=1> I;                  // no.subect, subj[N] max
int<lower=1, upper=I> subj[N];   // subj index
}
parameters{
vector[k] alpha;
vector[k] beta;
vector[I] u;
real h;
real<lower = 0> sigma_u;
real<lower = 0> sigma1; // lognormal distribution
real<lower = 0> nu2;    // gamma distribution
}
transformed parameters{
vector[N] mu1;
vector[N] mu2;
vector[N] Xalpha;
vector[N] Xbeta;
vector[N] log_lik; // 构造似然函数
real<lower = 0> sigma2_u;
sigma2_u = (sigma_u)^2;
Xalpha = X*alpha;
Xbeta = X*beta;
for (i in 1:N){
mu1[i] = (Xalpha[i] + u[subj[i]]);
mu2[i] = exp(Xbeta[i] + h*u[subj[i]]);
}
for (i in 1:N) {
log_lik[i] = - 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
- nu2*log((1/nu2)*mu2[i]) + (nu2 - 1)*log(y2[i]) - (y2[i]*nu2)/mu2[i] - lgamma(nu2);
}
}
model{
target += normal_lpdf(alpha|0, 10);
target += normal_lpdf(beta|0, 10);
target += cauchy_lpdf(sigma1|0, 2.5);
target += cauchy_lpdf(nu2|0, 2.5);
target += gamma_lpdf(sigma_u|2, 10);
target += normal_lpdf(h|0, 1);
target += log_lik;
}
generated quantities {
vector[N] PointPosteriors;
for (i in 1:N) {
PointPosteriors[i] = exp(- 0.5*log(2*3.14159) - log(sigma1) - log(y1[i]) - (log(y1[i]) - mu1[i])^2/(2*sigma1^2)
- nu2*log((1/nu2)*mu2[i]) + (nu2 - 1)*log(y2[i]) - (y2[i]*nu2)/mu2[i] - lgamma(nu2));
}
}
"
m2 <- stan(model_code = model.m2,
data = mydat,
#control = list(adapt_delta = 0.98),
#algorithm = "Fixed_param",
chains = 2,
#iter = 30000, warmup = 10000, thin = 10, chains = 2,
seed = 12222)
stan_trace(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'))
print(m2, pars = c('alpha', 'sigma1','beta', 'nu2', 'sigma_u'),
digits_summary = 3,
probs = c(0.05, 0.5, 0.95))
rm(list = ls())      # clear workspace"
setwd("F:/Github - LabtopLee/Seminar-2017/week 2/triangle data")
insurer.data="comauto_pos.csv"
grpcode="353"
losstype="incloss"  #"incloss" if incurred loss or "cpdloss" if paid loss
insurer.data = "comauto_pos.csv"
#insurer.data = "ppauto_pos.csv"
#insurer.data = "wkcomp_pos.csv"
#insurer.data = "othliab_pos.csv"
#insurer.data = "prodliab_pos.csv"
#insurer.data = "medmal_pos.csv"
grpcode = "353"
losstype = "incloss"  #"incloss" if incurred loss or "cpdloss" if paid loss
a = read.csv(insurer.data)
ins.line.data=function(g.code){
b=subset(a,a$GRCODE==g.code)
name=b$GRNAME
grpcode=b$GRCODE
w=b$AccidentYear
d=b$DevelopmentLag
cum_incloss=b[,6]
cum_pdloss=b[,7]
bulk_loss=b[,8]
dir_premium=b[,9]
ced_premium=b[,10]
net_premium=b[,11]
single=b[,12]
posted_reserve97=b[,13]
# get incremental paid losses - assume data is sorted by ay and lag
inc_pdloss=numeric(0)
for (i in unique(w)){
s=(w==i)
pl=c(0,cum_pdloss[s])
ndev=length(pl)-1
il=rep(0,ndev)
for (j in 1:ndev){
il[j]=pl[j+1]-pl[j]
}
inc_pdloss=c(inc_pdloss,il)
}
data.out=data.frame(grpcode,w,d,net_premium,dir_premium,ced_premium,
cum_pdloss,cum_incloss,bulk_loss,inc_pdloss,single,posted_reserve97)
return(data.out)
}
cdata=ins.line.data(grpcode)
w=cdata$w-1987
d=cdata$d
premium=cdata$net_premium
cpdloss=cdata$cum_pdloss
incloss=cdata$cum_incloss-cdata$bulk_loss
cpdloss=pmax(1,cpdloss)
incloss=pmax(1,incloss)
adata=data.frame(grpcode,w,d,premium,cpdloss,incloss)
rdata=subset(adata,(adata$w+adata$d)<12)
maxlevel=log(2*max(rdata$premium))
numw=length(unique(rdata$w))
if(losstype=="incloss") rloss=rdata$incloss else rloss=rdata$cpdloss
if(losstype=="incloss") aloss=adata$incloss else aloss=adata$cpdloss
rtriangle=as.triangle(rdata,origin="w",dev="d",value=losstype)
library(ChainLadder)
rtriangle=as.triangle(rdata,origin="w",dev="d",value=losstype)
rtriangle
rdata
a
a = data.table(a)
a = read.csv(insurer.data)
library(data.table)
a = data.table(a)
a
unique(a$GRCODE)
length(unique(a$GRCODE))
